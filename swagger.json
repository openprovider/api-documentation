{
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "schemes": [
        "http",
        "https"
    ],
    "swagger": "2.0",
    "info": {
        "title": "Openprovider public contracts",
        "contact": {
            "name": "Openprovider public contracts",
            "url": "https://github.com/openprovider/contracts"
        },
        "version": "v2alpha"
    },
    "paths": {
        "/v2alpha/access/authentication/login": {
            "post": {
                "tags": [
                    "AuthenticationService"
                ],
                "summary": "Login method logs in user by username and password\nOptional field application_id can be used to change application",
                "operationId": "AuthenticationService_Login",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authenticationLoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/authenticationLoginResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response",
                        "schema": {
                            "$ref": "#/definitions/rpcStatus"
                        }
                    }
                }
            }
        },
        "/v2alpha/access/authentication/login:oauth-token": {
            "post": {
                "tags": [
                    "AuthenticationService"
                ],
                "summary": "Exchange auth code to oauth access and refresh tokens",
                "operationId": "AuthenticationService_TokenExchange",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authenticationTokenExchangeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/authenticationTokensPair"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response",
                        "schema": {
                            "$ref": "#/definitions/rpcStatus"
                        }
                    }
                }
            }
        },
        "/v2alpha/access/authentication/login:two-factor": {
            "post": {
                "tags": [
                    "AuthenticationService"
                ],
                "summary": "TwoFactorLogin login user via two factor auth code",
                "operationId": "AuthenticationService_TwoFactorLogin",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authenticationTwoFactorLoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/authenticationTwoFactorLoginResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response",
                        "schema": {
                            "$ref": "#/definitions/rpcStatus"
                        }
                    }
                }
            }
        },
        "/v2alpha/access/authentication/logout": {
            "delete": {
                "tags": [
                    "AuthenticationService"
                ],
                "summary": "Logout user from current active session",
                "operationId": "AuthenticationService_Logout",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": []
                    },
                    "default": {
                        "description": "An unexpected error response",
                        "schema": {
                            "$ref": "#/definitions/rpcStatus"
                        }
                    }
                }
            }
        },
        "/v2alpha/access/authentication/tokens:refresh": {
            "post": {
                "tags": [
                    "AuthenticationService"
                ],
                "summary": "Refresh oauth tokens",
                "operationId": "AuthenticationService_RefreshToken",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authenticationRefreshTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/authenticationTokensPair"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response",
                        "schema": {
                            "$ref": "#/definitions/rpcStatus"
                        }
                    }
                }
            }
        },
        "/v2alpha/identity/accountAttributes": {
            "get": {
                "tags": [
                    "AccountAttributeService"
                ],
                "summary": "Get attributes list",
                "operationId": "AccountAttributeService_ListAttributes",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Count of records in page.",
                        "name": "pageSize",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number.",
                        "name": "pageNumber",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SQL-like order clause\nformat is: <field1> <ASC|DESC>[, <field2> <ASC|DESC>]\ndefault: name ASC\npossible fields: create_time, update_time, name\ndefault value: \"create_time ASC\".",
                        "name": "orderBy",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/attributeListAttributesResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response",
                        "schema": {
                            "$ref": "#/definitions/rpcStatus"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "AccountAttributeService"
                ],
                "summary": "Crete a new attribute",
                "operationId": "AccountAttributeService_CreateAttribute",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/attributeCreateAttributeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/attributeAttribute"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response",
                        "schema": {
                            "$ref": "#/definitions/rpcStatus"
                        }
                    }
                }
            }
        },
        "/v2alpha/identity/accountAttributes/{id}": {
            "delete": {
                "tags": [
                    "AccountAttributeService"
                ],
                "summary": "Delete attribute\nCan be done only if attribute is unused",
                "operationId": "AccountAttributeService_DeleteAttribute",
                "parameters": [
                    {
                        "type": "string",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": []
                    },
                    "default": {
                        "description": "An unexpected error response",
                        "schema": {
                            "$ref": "#/definitions/rpcStatus"
                        }
                    }
                }
            }
        },
        "/v2alpha/identity/accounts": {
            "get": {
                "tags": [
                    "AccountService"
                ],
                "summary": "List accounts",
                "operationId": "AccountService_ListAccounts",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Count of records in page.",
                        "name": "pageSize",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number.",
                        "name": "pageNumber",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Show only children of a given account.",
                        "name": "parentId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SQL-like order clause\nformat is: <field1> <ASC|DESC>[, <field2> <ASC|DESC>]\nexample: update_time DESC\npossible fields: create_time, update_time, name\ndefault value: \"create_time ASC\".",
                        "name": "orderBy",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/accountListAccountsResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response",
                        "schema": {
                            "$ref": "#/definitions/rpcStatus"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "AccountService"
                ],
                "summary": "Create a new account",
                "operationId": "AccountService_CreateAccount",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/accountCreateAccountRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/accountAccount"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response",
                        "schema": {
                            "$ref": "#/definitions/rpcStatus"
                        }
                    }
                }
            }
        },
        "/v2alpha/identity/accounts/{accountId}/attributes": {
            "post": {
                "tags": [
                    "AccountService"
                ],
                "summary": "Set attributes",
                "operationId": "AccountService_SetAttributes",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The Account's ID",
                        "name": "accountId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/accountSetAttributesRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": []
                    },
                    "default": {
                        "description": "An unexpected error response",
                        "schema": {
                            "$ref": "#/definitions/rpcStatus"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "AccountService"
                ],
                "summary": "Delete attributes",
                "operationId": "AccountService_DeleteAttributes",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The Account's ID",
                        "name": "accountId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/accountDeleteAttributesRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": []
                    },
                    "default": {
                        "description": "An unexpected error response",
                        "schema": {
                            "$ref": "#/definitions/rpcStatus"
                        }
                    }
                }
            }
        },
        "/v2alpha/identity/accounts/{accountId}/users": {
            "get": {
                "tags": [
                    "AccountService"
                ],
                "summary": "Get users linked to account",
                "operationId": "AccountService_ListUsers",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The Account's ID",
                        "name": "accountId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Count of records in page.",
                        "name": "pageSize",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Page number.",
                        "name": "pageNumber",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SQL-like order clause\nformat is: <field1> <ASC|DESC>[, <field2> <ASC|DESC>]\nexample: update_time DESC\npossible fields: create_time\ndefault value: \"create_time ASC\".",
                        "name": "orderBy",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/accountListUsersResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response",
                        "schema": {
                            "$ref": "#/definitions/rpcStatus"
                        }
                    }
                }
            }
        },
        "/v2alpha/identity/accounts/{accountId}/users/{userId}": {
            "post": {
                "tags": [
                    "AccountService"
                ],
                "summary": "Attach user to account",
                "operationId": "AccountService_AddUser",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The Account's ID",
                        "name": "accountId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The User's ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/accountAccountUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": []
                    },
                    "default": {
                        "description": "An unexpected error response",
                        "schema": {
                            "$ref": "#/definitions/rpcStatus"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "AccountService"
                ],
                "summary": "Delete user from account",
                "operationId": "AccountService_RemoveUser",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The Account's ID",
                        "name": "accountId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The User's ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/accountAccountUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": []
                    },
                    "default": {
                        "description": "An unexpected error response",
                        "schema": {
                            "$ref": "#/definitions/rpcStatus"
                        }
                    }
                }
            }
        },
        "/v2alpha/identity/accounts/{accountId}:getHierarchy": {
            "get": {
                "tags": [
                    "AccountService"
                ],
                "summary": "Get parent accounts",
                "operationId": "AccountService_GetHierarchy",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The Account's ID",
                        "name": "accountId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/accountGetHierarchyResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response",
                        "schema": {
                            "$ref": "#/definitions/rpcStatus"
                        }
                    }
                }
            }
        },
        "/v2alpha/identity/accounts/{id}": {
            "get": {
                "tags": [
                    "AccountService"
                ],
                "summary": "Get account object",
                "operationId": "AccountService_GetAccount",
                "parameters": [
                    {
                        "type": "string",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/accountGetAccountResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response",
                        "schema": {
                            "$ref": "#/definitions/rpcStatus"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "AccountService"
                ],
                "summary": "Update account",
                "operationId": "AccountService_UpdateAccount",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The Account's ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/accountAccount"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/accountAccount"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response",
                        "schema": {
                            "$ref": "#/definitions/rpcStatus"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "AccountService"
                ],
                "summary": "Delete account",
                "operationId": "AccountService_DeleteAccount",
                "parameters": [
                    {
                        "type": "string",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": []
                    },
                    "default": {
                        "description": "An unexpected error response",
                        "schema": {
                            "$ref": "#/definitions/rpcStatus"
                        }
                    }
                }
            }
        },
        "/v2alpha/products/domain/operations/transfer/requests/{id}": {
            "get": {
                "tags": [
                    "DomainTransfer"
                ],
                "summary": "Get domain transfer status info (like state, start and end dates and etc.).",
                "operationId": "DomainTransfer_GetDomain",
                "parameters": [
                    {
                        "type": "string",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/transferDomain"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                }
            }
        },
        "/v2alpha/products/domain/operations/transfer/requests:batch": {
            "post": {
                "tags": [
                    "DomainTransfer"
                ],
                "summary": "Batch request of incoming domain transfers.",
                "operationId": "DomainTransfer_BatchTransfer",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/transferBatchTransferRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/transferBatchTransferResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                }
            }
        },
        "/v2alpha/products/domain/operations/transfer/requests:search": {
            "post": {
                "tags": [
                    "DomainTransfer"
                ],
                "summary": "Search domain transfers' info (like state, start and end dates and etc.).",
                "operationId": "DomainTransfer_SearchDomains",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/transferSearchDomainsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/transferSearchDomainsResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                }
            }
        },
        "/v2alpha/products/domain/operations/transfer:batchInfo": {
            "post": {
                "tags": [
                    "DomainTransfer"
                ],
                "summary": "Batch request of getting information for possible domains transfers.",
                "operationId": "DomainTransfer_BatchGetTransferInfo",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/transferBatchGetTransferInfoRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.(streaming responses)",
                        "schema": {
                            "type": "object",
                            "title": "Stream result of transferBatchGetTransferInfoResponse",
                            "properties": {
                                "error": {
                                    "$ref": "#/definitions/googlerpcStatus"
                                },
                                "result": {
                                    "$ref": "#/definitions/transferBatchGetTransferInfoResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                }
            }
        },
        "/v2alpha/products/domain/operations/transfer:info": {
            "post": {
                "tags": [
                    "DomainTransfer"
                ],
                "summary": "Get information for possible transfer of the domain (like availability for\ntransfer, expiration date, etc.).",
                "operationId": "DomainTransfer_GetTransferInfo",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/transferGetTransferInfoRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/transferGetTransferInfoResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response",
                        "schema": {
                            "$ref": "#/definitions/googlerpcStatus"
                        }
                    }
                }
            }
        },
        "/v2alpha/products/domains/names:suggest": {
            "post": {
                "tags": [
                    "DomainNameSuggester"
                ],
                "summary": "Suggest domain names",
                "operationId": "DomainNameSuggester_SuggestNames",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/nameSuggestNamesRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/nameSuggestNamesResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response",
                        "schema": {
                            "$ref": "#/definitions/rpcStatus"
                        }
                    }
                }
            }
        },
        "/v2alpha/products/{product}/availability": {
            "get": {
                "tags": [
                    "Availability"
                ],
                "summary": "List items with availability info within product",
                "operationId": "Availability_ListProducts",
                "parameters": [
                    {
                        "enum": [
                            "domain"
                        ],
                        "type": "string",
                        "description": "The product identifier",
                        "name": "product",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The query is query string for fetching products availabilities\nFor example, \"domain\" product if domain is example.com, query string is \"example\".",
                        "name": "query",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The excludePsdName is comma separated string containing the PSDs to be excluded from the list with the results\nFor example, excludePsdName=com,co.uk\nRedundant space characters in the syntax are insignificant. \"com,co.uk\" and \"  com,    co.uk\" are equivalent.",
                        "name": "filter.domain.excludePsdName",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The includePsdName is comma separated string containing the PSDs to be included to the list with the results\nFor example, includePsdName=com,co.uk\nRedundant space characters in the syntax are insignificant. \"com,co.uk\" and \"  com,    co.uk\" are equivalent.",
                        "name": "filter.domain.includePsdName",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.(streaming responses)",
                        "schema": {
                            "type": "object",
                            "title": "Stream result of availabilityProductAvailable",
                            "properties": {
                                "error": {
                                    "$ref": "#/definitions/rpcStatus"
                                },
                                "result": {
                                    "$ref": "#/definitions/availabilityProductAvailable"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response",
                        "schema": {
                            "$ref": "#/definitions/rpcStatus"
                        }
                    }
                }
            }
        },
        "/v2alpha/products/{product}/prices": {
            "get": {
                "tags": [
                    "PriceService"
                ],
                "summary": "List prices",
                "operationId": "PriceService_ListPrices",
                "parameters": [
                    {
                        "enum": [
                            "domain"
                        ],
                        "type": "string",
                        "description": "The product identifier",
                        "name": "product",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The query is query string for fetching products prices.\nFor example, \"domain\" product if domain is example.com, query string is \"example\".",
                        "name": "query",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "The number of the quantity.",
                        "name": "filter.domain.quantity",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The excludePsdName is comma separated string containing the PSDs to be excluded from the list with the results\nFor example, excludePsdName=com,co.uk\nRedundant space characters in the syntax are insignificant. \"com,co.uk\" and \"  com,    co.uk\" are equivalent.",
                        "name": "filter.domain.excludePsdName",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The includePsdName is comma separated string containing the PSDs to be included to the list with the results\nFor example, includePsdName=com,co.uk\nRedundant space characters in the syntax are insignificant. \"com,co.uk\" and \"  com,    co.uk\" are equivalent.",
                        "name": "filter.domain.includePsdName",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.(streaming responses)",
                        "schema": {
                            "type": "object",
                            "title": "Stream result of pricePrice",
                            "properties": {
                                "error": {
                                    "$ref": "#/definitions/rpcStatus"
                                },
                                "result": {
                                    "$ref": "#/definitions/pricePrice"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "An unexpected error response",
                        "schema": {
                            "$ref": "#/definitions/rpcStatus"
                        }
                    }
                }
            }
        },
        "/v2alpha/providers/registrarCredentials": {
            "get": {
                "tags": [
                    "CredentialsService"
                ],
                "summary": "Get all reseller credentials",
                "operationId": "CredentialsService_ListCredentials",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "name": "pageSize",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int64",
                        "name": "pageNumber",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/credentialsListCredentialsResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response",
                        "schema": {
                            "$ref": "#/definitions/rpcStatus"
                        }
                    }
                }
            }
        },
        "/v2alpha/providers/registrarCredentials/{id}": {
            "delete": {
                "tags": [
                    "CredentialsService"
                ],
                "summary": "Deletes credentials record",
                "operationId": "CredentialsService_DeleteCredentials",
                "parameters": [
                    {
                        "type": "string",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": []
                    },
                    "default": {
                        "description": "An unexpected error response",
                        "schema": {
                            "$ref": "#/definitions/rpcStatus"
                        }
                    }
                }
            }
        },
        "/v2alpha/providers/registrarCredentials/{id}:check": {
            "post": {
                "tags": [
                    "CredentialsChecker"
                ],
                "summary": "Check a saved Credentials by logging in to a registrar",
                "operationId": "CredentialsChecker_CheckCredentialsByID",
                "parameters": [
                    {
                        "type": "string",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/credentialsCheckCredentialsResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response",
                        "schema": {
                            "$ref": "#/definitions/rpcStatus"
                        }
                    }
                }
            }
        },
        "/v2alpha/providers/registrars": {
            "get": {
                "tags": [
                    "RegistrarService"
                ],
                "summary": "List all available registrars",
                "operationId": "RegistrarService_ListRegistrars",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "name": "pageSize",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int64",
                        "name": "pageNumber",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/registrarListRegistrarsResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response",
                        "schema": {
                            "$ref": "#/definitions/rpcStatus"
                        }
                    }
                }
            }
        },
        "/v2alpha/providers/registrars/{id}/credentials": {
            "get": {
                "tags": [
                    "CredentialsService"
                ],
                "summary": "Get all reseller credentials for registrar",
                "operationId": "CredentialsService_ListRegistrarCredentials",
                "parameters": [
                    {
                        "type": "string",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "format": "int64",
                        "name": "pageSize",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int64",
                        "name": "pageNumber",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/credentialsListCredentialsResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response",
                        "schema": {
                            "$ref": "#/definitions/rpcStatus"
                        }
                    }
                }
            }
        },
        "/v2alpha/providers/registrars/{registrarId}/credentials:check": {
            "post": {
                "tags": [
                    "CredentialsChecker"
                ],
                "summary": "Check a Credentials by logging in to a registrar",
                "operationId": "CredentialsChecker_CheckCredentials",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of registrar",
                        "name": "registrarId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/credentialsCheckCredentialsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/credentialsCheckCredentialsResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response",
                        "schema": {
                            "$ref": "#/definitions/rpcStatus"
                        }
                    }
                }
            }
        },
        "/v2alpha/providers/registrars/{registrarId}/credentials:save": {
            "post": {
                "tags": [
                    "CredentialsService"
                ],
                "summary": "Save (create or update) a Credentials object",
                "operationId": "CredentialsService_SaveCredentials",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of registrar",
                        "name": "registrarId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/credentialsSaveCredentialsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/credentialsCredentialsResponse"
                        }
                    },
                    "default": {
                        "description": "An unexpected error response",
                        "schema": {
                            "$ref": "#/definitions/rpcStatus"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "DomainSubType": {
            "description": "The domain transfer subtype.\n\n - REGULAR: Regular transfer. Outgoing transfer is always regular.\n - ROBOT: Transfer via robots (hidden for end users).\n - RECOMMENDED: Recommended for incoming transfer from another registrar(-s).\n - INTERNAL: Internal transfer (inside the system).",
            "type": "string",
            "default": "REGULAR",
            "enum": [
                "REGULAR",
                "ROBOT",
                "RECOMMENDED",
                "INTERNAL"
            ]
        },
        "GetTransferInfoResponseReason": {
            "description": "The reason why domain is unavailable for transfer.\nThe reason is specified when availability = false.\n\n - UNSPECIFIED: Not set. It means that the domain is available for transfer (avail = true).\n - FREE: Domain is free and available for registration.\n - LOCKED: Domain is locked for transfer by the domain's owner (registrar)\n(clientTransferProhibited EPP status) or by the registry\n(serverTransferProhibited EPP status).\n - PENDING_TRANSFER: Transfer of the domain is in progress already (pendingTransfer EPP status).",
            "type": "string",
            "default": "UNSPECIFIED",
            "enum": [
                "UNSPECIFIED",
                "FREE",
                "LOCKED",
                "PENDING_TRANSFER"
            ]
        },
        "ValueKind": {
            "type": "string",
            "title": "Value type",
            "default": "UNKNOWN",
            "enum": [
                "UNKNOWN",
                "STRING",
                "INT",
                "BOOL",
                "FLOAT",
                "TIMESTAMP",
                "DURATION"
            ]
        },
        "accountAccount": {
            "type": "object",
            "properties": {
                "createTime": {
                    "type": "string",
                    "format": "date-time",
                    "title": "The Account's create time"
                },
                "id": {
                    "type": "string",
                    "title": "The Account's ID"
                },
                "name": {
                    "type": "string",
                    "title": "The Account's name"
                },
                "parentId": {
                    "type": "string",
                    "title": "The Account's parent ID"
                },
                "type": {
                    "title": "The Account's type",
                    "$ref": "#/definitions/identityaccountType"
                },
                "updateTime": {
                    "type": "string",
                    "format": "date-time",
                    "title": "The Account's update time"
                }
            }
        },
        "accountAccountUser": {
            "type": "object",
            "title": "Account-user link",
            "properties": {
                "accountId": {
                    "type": "string",
                    "title": "The Account's ID"
                },
                "userId": {
                    "type": "string",
                    "title": "The User's ID"
                }
            }
        },
        "accountAccountUserRequest": {
            "type": "object",
            "title": "Request to add or to remove user from account",
            "properties": {
                "accountId": {
                    "type": "string",
                    "title": "The Account's ID"
                },
                "userId": {
                    "type": "string",
                    "title": "The User's ID"
                }
            }
        },
        "accountCreateAccountRequest": {
            "type": "object",
            "properties": {
                "attributes": {
                    "type": "object",
                    "title": "The Account's attributes",
                    "additionalProperties": {
                        "$ref": "#/definitions/accountattributeValue"
                    }
                },
                "name": {
                    "type": "string",
                    "title": "The Account's name"
                },
                "parentId": {
                    "type": "string",
                    "title": "The Account's parent ID"
                },
                "type": {
                    "title": "The Account's type",
                    "$ref": "#/definitions/identityaccountType"
                }
            }
        },
        "accountDeleteAttributesRequest": {
            "type": "object",
            "properties": {
                "accountId": {
                    "type": "string",
                    "title": "The Account's ID"
                },
                "attributeNames": {
                    "type": "array",
                    "title": "Attribute names to delete",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "accountGetAccountResponse": {
            "type": "object",
            "properties": {
                "account": {
                    "title": "The Account itself",
                    "$ref": "#/definitions/accountAccount"
                },
                "attributes": {
                    "type": "object",
                    "title": "The Account's attributes map",
                    "additionalProperties": {
                        "$ref": "#/definitions/accountattributeValue"
                    }
                }
            }
        },
        "accountGetHierarchyResponse": {
            "type": "object",
            "properties": {
                "accounts": {
                    "type": "array",
                    "title": "Accounts hierarchy in order of precedence\ni.e master account will be first in list",
                    "items": {
                        "$ref": "#/definitions/accountAccount"
                    }
                }
            }
        },
        "accountListAccountsResponse": {
            "type": "object",
            "properties": {
                "accounts": {
                    "type": "array",
                    "title": "Returned accounts collection",
                    "items": {
                        "$ref": "#/definitions/accountAccount"
                    }
                },
                "totalPages": {
                    "type": "integer",
                    "format": "int64",
                    "title": "Total amount of records"
                }
            }
        },
        "accountListUsersResponse": {
            "type": "object",
            "title": "Collection of account-user links",
            "properties": {
                "links": {
                    "type": "array",
                    "title": "Account-User links",
                    "items": {
                        "$ref": "#/definitions/accountAccountUser"
                    }
                },
                "totalPages": {
                    "type": "integer",
                    "format": "int64",
                    "title": "Total amount of records"
                }
            }
        },
        "accountSetAttributesRequest": {
            "type": "object",
            "properties": {
                "accountId": {
                    "type": "string",
                    "title": "The Account's ID"
                },
                "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "additionalProperties": {
                        "$ref": "#/definitions/accountattributeValue"
                    }
                }
            }
        },
        "accountattributeValue": {
            "type": "object",
            "title": "Attribute value",
            "properties": {
                "boolVal": {
                    "type": "boolean",
                    "format": "boolean",
                    "title": "Boolean value"
                },
                "createTime": {
                    "type": "string",
                    "format": "date-time",
                    "title": "Value create time"
                },
                "durationVal": {
                    "type": "string",
                    "title": "Duration value"
                },
                "floatVal": {
                    "type": "number",
                    "format": "float",
                    "title": "Float value"
                },
                "intVal": {
                    "type": "string",
                    "format": "int64",
                    "title": "Integer value"
                },
                "kind": {
                    "title": "Value type",
                    "$ref": "#/definitions/ValueKind"
                },
                "strVal": {
                    "type": "string",
                    "title": "String value"
                },
                "timestampVal": {
                    "type": "string",
                    "format": "date-time",
                    "title": "Timestamp value"
                },
                "updateTime": {
                    "type": "string",
                    "format": "date-time",
                    "title": "Value update time"
                }
            }
        },
        "attributeAttribute": {
            "type": "object",
            "title": "Attribute",
            "properties": {
                "Description": {
                    "type": "string",
                    "title": "The Attribute's description"
                },
                "createTime": {
                    "type": "string",
                    "format": "date-time",
                    "title": "The Attribute's create time"
                },
                "id": {
                    "type": "string",
                    "title": "The Attribute's ID"
                },
                "kind": {
                    "title": "The Attribute's type",
                    "$ref": "#/definitions/ValueKind"
                },
                "name": {
                    "type": "string",
                    "title": "The Attribute's name"
                },
                "updateTime": {
                    "type": "string",
                    "format": "date-time",
                    "title": "The Attribute's update time"
                }
            }
        },
        "attributeCreateAttributeRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "title": "The Attribute's description"
                },
                "kind": {
                    "title": "The Attribute's type",
                    "$ref": "#/definitions/ValueKind"
                },
                "name": {
                    "type": "string",
                    "title": "The Attribute's name"
                }
            }
        },
        "attributeListAttributesResponse": {
            "type": "object",
            "properties": {
                "attributes": {
                    "type": "array",
                    "title": "Attributes collection",
                    "items": {
                        "$ref": "#/definitions/attributeAttribute"
                    }
                },
                "totalPages": {
                    "type": "integer",
                    "format": "int64",
                    "title": "Total amount of pages"
                }
            }
        },
        "authenticationLoginRequest": {
            "type": "object",
            "title": "Login Request",
            "properties": {
                "applicationId": {
                    "type": "string",
                    "title": "Application ID. Optional"
                },
                "password": {
                    "type": "string",
                    "title": "Password"
                },
                "username": {
                    "type": "string",
                    "title": "Username"
                }
            }
        },
        "authenticationLoginResponse": {
            "type": "object",
            "title": "Login response",
            "properties": {
                "code": {
                    "type": "string",
                    "title": "Code which later should be passed to TokenExchange"
                },
                "isTwoFactorEnabled": {
                    "type": "boolean",
                    "format": "boolean",
                    "title": "Is two factor enabled on account?"
                },
                "sessionId": {
                    "type": "string",
                    "title": "Authentication session id. Also should be passed to AuthenticateAuthCode"
                }
            }
        },
        "authenticationRefreshTokenRequest": {
            "type": "object",
            "title": "Refresh OAuth tokens request",
            "properties": {
                "refreshToken": {
                    "type": "string",
                    "title": "Refresh token value"
                }
            }
        },
        "authenticationTokenExchangeRequest": {
            "type": "object",
            "title": "Token exchange request",
            "properties": {
                "applicationId": {
                    "type": "string",
                    "title": "Application ID. Optional"
                },
                "code": {
                    "type": "string",
                    "title": "Authentication code obtained from Login[two-factor] request"
                }
            }
        },
        "authenticationTokenType": {
            "type": "string",
            "title": "- Access: Access token is used to access API\n - Refresh: Refresh token is used to refresh OAuth tokens",
            "default": "Access",
            "enum": [
                "Access",
                "Refresh"
            ]
        },
        "authenticationTokensPair": {
            "type": "object",
            "title": "OAuth tokens pair",
            "properties": {
                "access": {
                    "title": "Access Token",
                    "$ref": "#/definitions/authenticationUserSessionToken"
                },
                "refresh": {
                    "title": "Refresh Token",
                    "$ref": "#/definitions/authenticationUserSessionToken"
                }
            }
        },
        "authenticationTwoFactorLoginRequest": {
            "type": "object",
            "title": "Two factor login request",
            "properties": {
                "code": {
                    "type": "string",
                    "title": "Authentication code"
                },
                "sessionId": {
                    "type": "string",
                    "title": "Authentication session id"
                }
            }
        },
        "authenticationTwoFactorLoginResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "title": "Code which later should be passed to AuthenticateAuthCode"
                },
                "sessionId": {
                    "type": "string",
                    "title": "Authentication session id. Also should be passed to AuthenticateAuthCode"
                }
            }
        },
        "authenticationUserSessionToken": {
            "type": "object",
            "properties": {
                "createTime": {
                    "type": "string",
                    "format": "date-time",
                    "title": "Token times"
                },
                "expireTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "id": {
                    "type": "string",
                    "title": "Token ID"
                },
                "type": {
                    "title": "Token type",
                    "$ref": "#/definitions/authenticationTokenType"
                },
                "userSessionId": {
                    "type": "string",
                    "title": "Session ID"
                },
                "value": {
                    "type": "string",
                    "title": "Token value"
                }
            }
        },
        "availabilityAvailableFilter": {
            "type": "object",
            "title": "The filter parameters",
            "properties": {
                "domain": {
                    "title": "The filter for the product \"domain\"",
                    "$ref": "#/definitions/availabilityDomainAvailableFilter"
                }
            }
        },
        "availabilityDomainAvailableFilter": {
            "type": "object",
            "title": "The domain availability filters",
            "properties": {
                "excludePsd": {
                    "title": "The PSD array to exclude from result list",
                    "$ref": "#/definitions/productPSDS"
                },
                "excludePsdName": {
                    "description": "The excludePsdName is comma separated string containing the PSDs to be excluded from the list with the results\nFor example, excludePsdName=com,co.uk\nRedundant space characters in the syntax are insignificant. \"com,co.uk\" and \"  com,    co.uk\" are equivalent.",
                    "type": "string"
                },
                "includePsd": {
                    "title": "The PSD array to include in result list",
                    "$ref": "#/definitions/productPSDS"
                },
                "includePsdName": {
                    "description": "The includePsdName is comma separated string containing the PSDs to be included to the list with the results\nFor example, includePsdName=com,co.uk\nRedundant space characters in the syntax are insignificant. \"com,co.uk\" and \"  com,    co.uk\" are equivalent.",
                    "type": "string"
                }
            }
        },
        "availabilityProductAvailable": {
            "type": "object",
            "title": "The response with products availability",
            "properties": {
                "available": {
                    "type": "boolean",
                    "format": "boolean",
                    "title": "The available determines if domain is available"
                },
                "domain": {
                    "$ref": "#/definitions/productDomain"
                }
            }
        },
        "credentialsCheckCredentialsRequest": {
            "type": "object",
            "title": "Request to check credentials before saving",
            "properties": {
                "login": {
                    "type": "string",
                    "title": "Login for reseller's account in the registrar"
                },
                "password": {
                    "type": "string",
                    "title": "Password for reseller's account in the registar"
                },
                "registrarId": {
                    "type": "string",
                    "title": "ID of registrar"
                }
            }
        },
        "credentialsCheckCredentialsResponse": {
            "type": "object",
            "title": "CheckCredentialsResponse",
            "properties": {
                "success": {
                    "type": "boolean",
                    "format": "boolean"
                }
            }
        },
        "credentialsCredentialsResponse": {
            "type": "object",
            "title": "Reseller's credentials with obfuscated (but recognizable) logins",
            "properties": {
                "id": {
                    "type": "string",
                    "title": "ID of credentials record"
                },
                "lastCheckFailed": {
                    "type": "boolean",
                    "format": "boolean",
                    "title": "Tells whether last credentials check failed"
                },
                "maskedLogin": {
                    "type": "string",
                    "title": "partially masked login"
                },
                "registrarId": {
                    "type": "string",
                    "title": "ID of registrar"
                }
            }
        },
        "credentialsListCredentialsResponse": {
            "type": "object",
            "title": "List of reseller's credentials with obfuscated (but recognizable) logins",
            "properties": {
                "credentials": {
                    "type": "array",
                    "title": "ID of credentials record",
                    "items": {
                        "$ref": "#/definitions/credentialsCredentialsResponse"
                    }
                },
                "total": {
                    "type": "integer",
                    "format": "int64",
                    "title": "total number of records"
                }
            }
        },
        "credentialsSaveCredentialsRequest": {
            "type": "object",
            "title": "Request to save basic credentials data",
            "properties": {
                "credentialsId": {
                    "type": "string",
                    "title": "Optional credentials ID is set when user wants to edit existing record"
                },
                "login": {
                    "type": "string",
                    "title": "Login for reseller's account in the registrar"
                },
                "password": {
                    "type": "string",
                    "title": "Password for reseller's account in the registar"
                },
                "registrarId": {
                    "type": "string",
                    "title": "ID of registrar"
                }
            }
        },
        "googlerpcStatus": {
            "description": "The `Status` type defines a logical error model that is suitable for\ndifferent programming environments, including REST APIs and RPC APIs. It is\nused by [gRPC](https://github.com/grpc). Each `Status` message contains\nthree pieces of data: error code, error message, and error details.\n\nYou can find out more about this error model and how to work with it in the\n[API Design Guide](https://cloud.google.com/apis/design/errors).",
            "type": "object",
            "properties": {
                "code": {
                    "description": "The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].",
                    "type": "integer",
                    "format": "int32"
                },
                "details": {
                    "description": "A list of messages that carry the error details.  There is a common set of\nmessage types for APIs to use.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/protobufAny"
                    }
                },
                "message": {
                    "description": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\n[google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.",
                    "type": "string"
                }
            }
        },
        "identityaccountType": {
            "type": "string",
            "default": "TYPE_UNKNOWN",
            "enum": [
                "TYPE_UNKNOWN",
                "HEAD_COMPANY",
                "BRANCH",
                "COMPANY",
                "RESELLER",
                "SUB_RESELLER"
            ]
        },
        "nameSuggestNamesRequest": {
            "type": "object",
            "properties": {
                "language": {
                    "type": "string",
                    "title": "language used for generated suggestions"
                },
                "limit": {
                    "type": "integer",
                    "format": "int32",
                    "title": "max number of suggestions to return in response"
                },
                "name": {
                    "type": "string",
                    "title": "name used to build alternative names \\ suggestions (excluding TLD)"
                },
                "sensitive": {
                    "type": "boolean",
                    "format": "boolean",
                    "title": "filter explicit content in response"
                },
                "tlds": {
                    "type": "array",
                    "title": "list of TLDs to suggest",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "nameSuggestNamesResponse": {
            "type": "object",
            "properties": {
                "names": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/nameSuggestedName"
                    }
                }
            }
        },
        "nameSuggestedName": {
            "type": "object",
            "properties": {
                "domain": {
                    "type": "string",
                    "title": "suggested domain name"
                },
                "name": {
                    "type": "string",
                    "title": "suggested domain name including TLD"
                },
                "tld": {
                    "type": "string",
                    "title": "suggested TLD"
                }
            }
        },
        "priceDomainPrice": {
            "type": "object",
            "title": "The domain price",
            "properties": {
                "price": {
                    "title": "The regular price",
                    "$ref": "#/definitions/typeMoney"
                },
                "psd": {
                    "description": "The PSD for domain.\nFor example, for domain example.com.cn the part com.cn is PSD.",
                    "$ref": "#/definitions/productPSD"
                }
            }
        },
        "priceDomainPriceFilter": {
            "type": "object",
            "title": "The domain price filters",
            "properties": {
                "excludePsd": {
                    "title": "The PSD array to exclude from result list",
                    "$ref": "#/definitions/productPSDS"
                },
                "excludePsdName": {
                    "description": "The excludePsdName is comma separated string containing the PSDs to be excluded from the list with the results\nFor example, excludePsdName=com,co.uk\nRedundant space characters in the syntax are insignificant. \"com,co.uk\" and \"  com,    co.uk\" are equivalent.",
                    "type": "string"
                },
                "includePsd": {
                    "title": "The PSD array to include in result list",
                    "$ref": "#/definitions/productPSDS"
                },
                "includePsdName": {
                    "description": "The includePsdName is comma separated string containing the PSDs to be included to the list with the results\nFor example, includePsdName=com,co.uk\nRedundant space characters in the syntax are insignificant. \"com,co.uk\" and \"  com,    co.uk\" are equivalent.",
                    "type": "string"
                },
                "quantity": {
                    "type": "integer",
                    "format": "int64",
                    "title": "The number of the quantity"
                }
            }
        },
        "pricePrice": {
            "type": "object",
            "title": "The domain with regular price",
            "properties": {
                "domainPrice": {
                    "title": "The price for the product \"domain\"",
                    "$ref": "#/definitions/priceDomainPrice"
                }
            }
        },
        "pricePriceFilter": {
            "type": "object",
            "title": "The filter parameters",
            "properties": {
                "domain": {
                    "title": "The filter for the product \"domain\"",
                    "$ref": "#/definitions/priceDomainPriceFilter"
                }
            }
        },
        "productDomain": {
            "type": "object",
            "title": "The representation of \"domain\" product",
            "properties": {
                "name": {
                    "type": "string",
                    "title": "The domain name\nFor example, for domain example.com.cn the part \"example\" is the name"
                },
                "psd": {
                    "description": "The PSD for domain.\nFor example, for domain example.com.cn the part com.cn is PSD.",
                    "$ref": "#/definitions/productPSD"
                }
            }
        },
        "productPSD": {
            "type": "object",
            "title": "The PSD is the acronym for public suffix domain and means an ordinal-free term to denote domains under which people can register their own domain name",
            "properties": {
                "name": {
                    "description": "The name equals tld if sld is empty. If sld is not empty, name equals <sld>.<tld>.\nFor example, for example.com name will be com. For example.co.uk name will be co.uk.",
                    "type": "string"
                },
                "sld": {
                    "type": "string",
                    "title": "The sld is a domain that is directly below a top-level domain (TLD).\nFor example, in example.com, example is the second-level domain of the .com TLD"
                },
                "tld": {
                    "description": "The tld is one of the domains at the highest level in the hierarchical Domain Name System of the Internet.\nFor example, in the domain name www.example.com, the top-level domain is com.",
                    "type": "string"
                },
                "type": {
                    "title": "The type of PSD",
                    "$ref": "#/definitions/productPSDType"
                }
            }
        },
        "productPSDS": {
            "type": "object",
            "title": "The array of PSD message",
            "properties": {
                "psd": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/productPSD"
                    }
                }
            }
        },
        "productPSDType": {
            "type": "string",
            "title": "The type of PSD",
            "default": "gTLD",
            "enum": [
                "gTLD",
                "ccTLD",
                "sTLD",
                "grTLD"
            ]
        },
        "productProduct": {
            "description": "- domain: The domain product identifier",
            "type": "string",
            "title": "The products",
            "default": "domain",
            "enum": [
                "domain"
            ]
        },
        "protobufAny": {
            "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := &pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }",
            "type": "object",
            "properties": {
                "typeUrl": {
                    "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics.",
                    "type": "string"
                },
                "value": {
                    "description": "Must be a valid serialized protocol buffer of the above specified type.",
                    "type": "string",
                    "format": "byte"
                }
            }
        },
        "registrarListRegistrarsResponse": {
            "type": "object",
            "title": "Array of registrars",
            "properties": {
                "registrars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/registrarRegistrar"
                    }
                },
                "total": {
                    "type": "integer",
                    "format": "int64",
                    "title": "Total count of records"
                }
            }
        },
        "registrarRegistrar": {
            "type": "object",
            "title": "A registrar item",
            "properties": {
                "id": {
                    "type": "string",
                    "title": "The ID of the registrar"
                },
                "name": {
                    "type": "string",
                    "title": "The name of the registrar"
                }
            }
        },
        "rpcStatus": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "format": "int32"
                },
                "details": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/protobufAny"
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "transferBatchGetTransferInfoRequest": {
            "description": "The request for BatchGetTransferInfo method.",
            "type": "object",
            "properties": {
                "requests": {
                    "description": "Requests which should be processed in a batch.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/transferGetTransferInfoRequest"
                    }
                }
            }
        },
        "transferBatchGetTransferInfoResponse": {
            "description": "The response from BatchGetTransferInfo method.",
            "type": "object",
            "properties": {
                "data": {
                    "title": "Transfer info about the domain",
                    "$ref": "#/definitions/transferGetTransferInfoResponse"
                },
                "error": {
                    "title": "The status of operation with the domain",
                    "$ref": "#/definitions/googlerpcStatus"
                },
                "name": {
                    "description": "Requested domain name.",
                    "type": "string"
                }
            }
        },
        "transferBatchTransferRequest": {
            "description": "The request for BatchTransfer method.",
            "type": "object",
            "properties": {
                "requests": {
                    "description": "Requests which should be processed in a batch.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/transferTransferRequest"
                    }
                }
            }
        },
        "transferBatchTransferResponse": {
            "description": "The response from BatchTransfer method.",
            "type": "object",
            "properties": {
                "responses": {
                    "description": "Requested transfers.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/transferTransferResponse"
                    }
                }
            }
        },
        "transferDomain": {
            "description": "The domain transfer status info like state and etc.",
            "type": "object",
            "properties": {
                "createTime": {
                    "description": "The UNIX time when transfer was initialized (requested).",
                    "type": "string",
                    "format": "date-time"
                },
                "endTime": {
                    "description": "The UNIX time when transfer was completed.\nIt will be set only when operation is completed (successfully,\nfailed, cancelled or rejected).",
                    "type": "string",
                    "format": "date-time"
                },
                "id": {
                    "description": "Transfer request ID.",
                    "type": "string"
                },
                "name": {
                    "description": "The domain name (e.g. openprovider.com).",
                    "type": "string"
                },
                "reason": {
                    "description": "The reason of transfer failure.\nIt will be set only if status = FAILED.",
                    "type": "string"
                },
                "startTime": {
                    "description": "The UNIX time when transfer was requested or scheduled at\nIt will be = create time if it's immediate transfer.",
                    "type": "string",
                    "format": "date-time"
                },
                "status": {
                    "description": "The transfer status.",
                    "$ref": "#/definitions/transferDomainStatus"
                },
                "subtype": {
                    "description": "The transfer subtype.",
                    "$ref": "#/definitions/DomainSubType"
                },
                "type": {
                    "description": "The transfer type (incoming or outgoing transfer).",
                    "$ref": "#/definitions/transferDomainType"
                },
                "updateTime": {
                    "description": "The UNIX time when transfer status was updated last time.",
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "transferDomainStatus": {
            "description": "The domain transfer status.\n\n - STATUS_UNSPECIFIED: Not set.\n - PENDING: The transfer has been requested (or scheduled).\n - RUNNING: The transfer is in progress.\n - CANCELLED: The transfer has been cancelled by the user.\n - REJECTED: The transfer has been rejected by other side.\n - DONE: The transfer has been completed successfully.\n - FAILED: The transfer has been failed by some reason (see `reason` field).\n - EXPIRED: Transfer's request has been expired.",
            "type": "string",
            "default": "STATUS_UNSPECIFIED",
            "enum": [
                "STATUS_UNSPECIFIED",
                "PENDING",
                "RUNNING",
                "CANCELLED",
                "REJECTED",
                "DONE",
                "FAILED",
                "EXPIRED"
            ]
        },
        "transferDomainType": {
            "description": "The domain transfer type.\n\n - INCOMING: Incoming transfer.\n - OUTGOING: Outgoing transfer.",
            "type": "string",
            "default": "INCOMING",
            "enum": [
                "INCOMING",
                "OUTGOING"
            ]
        },
        "transferGetTransferInfoRequest": {
            "description": "The request for GetTransferInfo method.",
            "type": "object",
            "properties": {
                "authCode": {
                    "type": "string",
                    "title": "The auth code. It's required parameter for some TLDs.\nTODO: add info about where to get this info"
                },
                "name": {
                    "description": "The domain name.",
                    "type": "string"
                }
            }
        },
        "transferGetTransferInfoResponse": {
            "description": "The response from GetTransferInfo method.",
            "type": "object",
            "properties": {
                "avail": {
                    "description": "The domain availability status for transfer.\nIt will be true when domain is available for transfer\nIt will be false when domain is unavailable for transfer, you can check the reason for more detailed information.",
                    "type": "boolean",
                    "format": "boolean"
                },
                "expireTime": {
                    "description": "The UNIX time when the domain will be expired on registry's side.\nIt will be null in cases when the registry doesn't return this info.",
                    "type": "string",
                    "format": "date-time"
                },
                "name": {
                    "description": "The domain name.",
                    "type": "string"
                },
                "reason": {
                    "description": "The reason shows why we are unable to transfer a domain. It will be filled only when\navail = false.",
                    "$ref": "#/definitions/GetTransferInfoResponseReason"
                }
            }
        },
        "transferSearchDomainsRequest": {
            "description": "The request for SearchDomain method.",
            "type": "object",
            "properties": {
                "pageNumber": {
                    "description": "Page number allows to skip the specified count of pages\nbefore beginning to return results.",
                    "type": "integer",
                    "format": "int64"
                },
                "pageSize": {
                    "description": "Page size allows to limit count of returned results.\nIf it is omitted, default page size will be used.\nIf it exceeds the maximum size, the maximum size will be used.",
                    "type": "integer",
                    "format": "int64"
                },
                "pageToken": {
                    "description": "The next_page_token value returned from a previous Search request, if any.",
                    "type": "string"
                },
                "query": {
                    "description": "The search query.",
                    "type": "string"
                },
                "returnTotalResults": {
                    "description": "If true, the total number of results that match the query ignoring the\nLIMIT clause will be included in the response.\nDefault is false.",
                    "type": "boolean",
                    "format": "boolean"
                }
            }
        },
        "transferSearchDomainsResponse": {
            "description": "The response from SearchDomain method.",
            "type": "object",
            "properties": {
                "domains": {
                    "description": "Requested domains.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/transferDomain"
                    }
                },
                "nextPageToken": {
                    "description": "Token to retrieve the next page of results, or empty if there are no\nmore results in the list.",
                    "type": "string"
                },
                "totalResults": {
                    "description": "The total number of results in the query result set.",
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "transferTransferRequest": {
            "description": "The request for Transfer method.",
            "type": "object",
            "properties": {
                "authCode": {
                    "description": "The auth code.",
                    "type": "string"
                },
                "daysBeforeExpiration": {
                    "description": "Days before expiration date when transfer process should be started.",
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "description": "The domain name.",
                    "type": "string"
                },
                "startTime": {
                    "description": "Start time of the transfer process.",
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "transferTransferResponse": {
            "description": "The response from Transfer method.",
            "type": "object",
            "properties": {
                "name": {
                    "description": "The name of requested domain.",
                    "type": "string"
                },
                "transferId": {
                    "description": "The transfer's ID for the domain in the system.",
                    "type": "string"
                }
            }
        },
        "typeMoney": {
            "description": "Represents an amount of money with its currency type.",
            "type": "object",
            "properties": {
                "currencyCode": {
                    "description": "The 3-letter currency code defined in ISO 4217.",
                    "type": "string"
                },
                "nanos": {
                    "description": "Number of nano (10^-9) units of the amount.\nThe value must be between -999,999,999 and +999,999,999 inclusive.\nIf `units` is positive, `nanos` must be positive or zero.\nIf `units` is zero, `nanos` can be positive, zero, or negative.\nIf `units` is negative, `nanos` must be negative or zero.\nFor example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.",
                    "type": "integer",
                    "format": "int32"
                },
                "units": {
                    "description": "The whole units of the amount.\nFor example if `currencyCode` is `\"USD\"`, then 1 unit is one US dollar.",
                    "type": "string",
                    "format": "int64"
                }
            }
        }
    },
    "securityDefinitions": {
        "Bearer": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "security": [
        {
            "Bearer": []
        }
    ],
    "externalDocs": {
        "description": "More about REST API v2",
        "url": "https://docs.openprovider.com/v2alpha"
    },
    "x-tagGroups": [
        {
            "name": "Account contracts",
            "tags": [
                "AccountService"
            ]
        },
        {
            "name": "protoc-gen-openapiv2/options/annotations.proto",
            "tags": []
        },
        {
            "name": "Account attribute contracts",
            "tags": [
                "AccountAttributeService"
            ]
        },
        {
            "name": "Authentication contracts",
            "tags": [
                "AuthenticationService"
            ]
        },
        {
            "name": "Product availability contracts",
            "tags": [
                "Availability"
            ]
        },
        {
            "name": "Registrar credentials contracts",
            "tags": [
                "RegistrarService"
            ]
        },
        {
            "name": "product/price/domain.proto",
            "tags": []
        },
        {
            "name": "google/api/http.proto",
            "tags": []
        },
        {
            "name": "google/type/money.proto",
            "tags": []
        },
        {
            "name": "Domain name suggester contracts",
            "tags": [
                "DomainNameSuggester"
            ]
        },
        {
            "name": "protoc-gen-openapiv2/options/openapiv2.proto",
            "tags": []
        },
        {
            "name": "Product price contracts",
            "tags": [
                "PriceService"
            ]
        },
        {
            "name": "Product contracts",
            "tags": []
        },
        {
            "name": "request/request.proto",
            "tags": []
        },
        {
            "name": "Domain Transfer contracts",
            "tags": [
                "DomainTransfer"
            ]
        },
        {
            "name": "Account contracts",
            "tags": [
                "AccountService"
            ]
        },
        {
            "name": "protoc-gen-openapiv2/options/annotations.proto",
            "tags": []
        },
        {
            "name": "Account attribute contracts",
            "tags": [
                "AccountAttributeService"
            ]
        },
        {
            "name": "Authentication contracts",
            "tags": [
                "AuthenticationService"
            ]
        },
        {
            "name": "Product availability contracts",
            "tags": [
                "Availability"
            ]
        },
        {
            "name": "Registrar credentials contracts",
            "tags": [
                "RegistrarService"
            ]
        },
        {
            "name": "product/price/domain.proto",
            "tags": []
        },
        {
            "name": "google/api/http.proto",
            "tags": []
        },
        {
            "name": "google/type/money.proto",
            "tags": []
        },
        {
            "name": "Domain name suggester contracts",
            "tags": [
                "DomainNameSuggester"
            ]
        },
        {
            "name": "protoc-gen-openapiv2/options/openapiv2.proto",
            "tags": []
        },
        {
            "name": "Product price contracts",
            "tags": [
                "PriceService"
            ]
        },
        {
            "name": "Product contracts",
            "tags": []
        },
        {
            "name": "request/request.proto",
            "tags": []
        },
        {
            "name": "Domain Transfer contracts",
            "tags": [
                "DomainTransfer"
            ]
        },
        {
            "name": "Account contracts",
            "tags": [
                "AccountService"
            ]
        },
        {
            "name": "protoc-gen-openapiv2/options/annotations.proto",
            "tags": []
        },
        {
            "name": "Account attribute contracts",
            "tags": [
                "AccountAttributeService"
            ]
        },
        {
            "name": "Authentication contracts",
            "tags": [
                "AuthenticationService"
            ]
        },
        {
            "name": "Product availability contracts",
            "tags": [
                "Availability"
            ]
        },
        {
            "name": "Registrar credentials contracts",
            "tags": [
                "RegistrarService"
            ]
        },
        {
            "name": "product/price/domain.proto",
            "tags": []
        },
        {
            "name": "google/api/http.proto",
            "tags": []
        },
        {
            "name": "google/type/money.proto",
            "tags": []
        },
        {
            "name": "Domain name suggester contracts",
            "tags": [
                "DomainNameSuggester"
            ]
        },
        {
            "name": "protoc-gen-openapiv2/options/openapiv2.proto",
            "tags": []
        },
        {
            "name": "Product price contracts",
            "tags": [
                "PriceService"
            ]
        },
        {
            "name": "Product contracts",
            "tags": []
        },
        {
            "name": "request/request.proto",
            "tags": []
        },
        {
            "name": "Domain Transfer contracts",
            "tags": [
                "DomainTransfer"
            ]
        }
    ],
    "tags": [
        {
            "name": "AccountService",
            "x-displayName": "Account"
        },
        {
            "name": "AccountAttributeService",
            "x-displayName": "AccountAttribute"
        },
        {
            "name": "AuthenticationService",
            "x-displayName": "Authentication"
        },
        {
            "name": "RegistrarService",
            "x-displayName": "Registrar"
        },
        {
            "name": "PriceService",
            "x-displayName": "Price"
        },
        {
            "name": "AccountService",
            "x-displayName": "Account"
        },
        {
            "name": "AccountAttributeService",
            "x-displayName": "AccountAttribute"
        },
        {
            "name": "AuthenticationService",
            "x-displayName": "Authentication"
        },
        {
            "name": "RegistrarService",
            "x-displayName": "Registrar"
        },
        {
            "name": "PriceService",
            "x-displayName": "Price"
        },
        {
            "name": "AccountService",
            "x-displayName": "Account"
        },
        {
            "name": "AccountAttributeService",
            "x-displayName": "AccountAttribute"
        },
        {
            "name": "AuthenticationService",
            "x-displayName": "Authentication"
        },
        {
            "name": "RegistrarService",
            "x-displayName": "Registrar"
        },
        {
            "name": "PriceService",
            "x-displayName": "Price"
        }
    ]
}